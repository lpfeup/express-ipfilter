{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","ipaddr","module","exports","ipfilter","ips","opts","logger","message","console","log","settings","defaults","mode","logF","excluding","detectIp","getClientIp","req","ipAddress","ip","isV6Format","indexOf","split","isV4Format","process","toString","matchClientIp","toLowerCase","result","invoke","testIp","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","length","startIp","toLong","endIp","longIp","res","next","results","exclude","regex","RegExp","test","url","logLevel","err"],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;;;AAGA,IAAIA,IAAIC,QAAQ,QAAR,CAAR;AACA,IAAIC,SAASD,QAAQ,IAAR,CAAb;AACA,IAAIE,aAAaF,QAAQ,aAAR,CAAjB;AACA,IAAIG,gBAAgBH,QAAQ,eAAR,CAApB;AACA,IAAII,SAASJ,QAAQ,WAAR,CAAb;;AAEA;;;;;;;;;;;;;;;;;;;;;;;AAuBAK,OAAOC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAC5CD,QAAMA,OAAO,KAAb;;AAEA,MAAIE,SAAS,SAATA,MAAS,CAASC,OAAT,EAAiB;AAAEC,YAAQC,GAAR,CAAYF,OAAZ;AAAsB,GAAtD;AACA,MAAIG,WAAWf,EAAEgB,QAAF,CAAYN,QAAQ,EAApB,EAAwB;AACrCO,UAAM,MAD+B;AAErCH,SAAK,IAFgC;AAGrCI,UAAMP,MAH+B;AAIrCQ,eAAW,EAJ0B;AAKrCC,cAAUC;AAL2B,GAAxB,CAAf;;AAQA,WAASA,WAAT,CAAqBC,GAArB,EAA0B;AACxB,QAAIC,YAAYD,IAAIE,EAApB;;AAEA,QAAGtB,OAAOuB,UAAP,CAAkBF,SAAlB,KAAgC,CAACA,UAAUG,OAAV,CAAkB,QAAlB,CAApC,EAAgE;AAC9DH,kBAAYA,UAAUI,KAAV,CAAgB,SAAhB,EAA2B,CAA3B,CAAZ;AACD;;AAED,QAAGzB,OAAO0B,UAAP,CAAkBL,SAAlB,KAAgC,CAACA,UAAUG,OAAV,CAAkB,GAAlB,CAApC,EAA2D;AACzDH,kBAAYA,UAAUI,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACD;;AAEDJ,gBAAYlB,OAAOwB,OAAP,CAAeN,SAAf,EAA0BO,QAA1B,EAAZ;;AAEA,WAAOP,SAAP;AACD;;AAED,MAAIQ,gBAAgB,SAAhBA,aAAgB,CAASP,EAAT,EAAY;AAC9B,QAAIP,OAAOF,SAASE,IAAT,CAAce,WAAd,EAAX;;AAEA,QAAIC,SAASjC,EAAEkC,MAAF,CAASzB,GAAT,EAAa0B,MAAb,EAAoBX,EAApB,EAAuBP,IAAvB,CAAb;;AAEA,QAAGA,SAAS,OAAZ,EAAoB;AAClB,aAAOjB,EAAEoC,IAAF,CAAOH,MAAP,CAAP;AACD,KAFD,MAEK;AACH,aAAOjC,EAAEqC,KAAF,CAAQJ,MAAR,CAAP;AACD;AACF,GAVD;;AAYA,MAAIE,SAAS,SAATA,MAAS,CAASX,EAAT,EAAYP,IAAZ,EAAiB;AAC5B,QAAIqB,aAAa,IAAjB;;AAEA;AACA,QAAG,OAAOA,UAAP,KAAsB,QAAzB,EAAkC;AAChC,UAAGnC,WAAWoC,UAAX,CAAsBD,UAAtB,CAAH,EAAqC;AACnC,eAAOE,cAAchB,EAAd,EAAiBc,UAAjB,EAA4BrB,IAA5B,CAAP;AACD,OAFD,MAEK;AACH,eAAOwB,eAAejB,EAAf,EAAkBc,UAAlB,EAA6BrB,IAA7B,CAAP;AACD;AACF;;AAED,QAAG,QAAOqB,UAAP,yCAAOA,UAAP,OAAsB,QAAzB,EAAkC;AAChC,aAAOI,UAAUlB,EAAV,EAAac,UAAb,EAAwBrB,IAAxB,CAAP;AACD;AACF,GAfD;;AAiBA,MAAIwB,iBAAiB,SAAjBA,cAAiB,CAASjB,EAAT,EAAYc,UAAZ,EAAuBrB,IAAvB,EAA4B;AAC/C,QAAGO,OAAOc,UAAV,EAAqB;AACnB,aAAOrB,SAAS,OAAhB;AACD,KAFD,MAEK;AACH,aAAOA,SAAS,MAAhB;AACD;AACF,GAND;;AAQA,MAAIuB,gBAAgB,SAAhBA,aAAgB,CAAShB,EAAT,EAAYc,UAAZ,EAAuBrB,IAAvB,EAA4B;AAC9C,QAAGd,WAAWwC,OAAX,CAAmBnB,EAAnB,EAAuBc,UAAvB,CAAH,EAAsC;AACpC,aAAOrB,SAAS,OAAhB;AACD,KAFD,MAEK;AACH,aAAOA,SAAS,MAAhB;AACD;AACF,GAND;;AAQA,MAAIyB,YAAY,SAAZA,SAAY,CAASlB,EAAT,EAAYc,UAAZ,EAAuBrB,IAAvB,EAA4B;AAC1C,QAAI2B,cAAc5C,EAAE6C,MAAF,CAASpC,GAAT,EAAa,UAAS6B,UAAT,EAAoB;AACjD,UAAGA,WAAWQ,MAAX,GAAoB,CAAvB,EAAyB;AACvB,YAAIC,UAAU7C,OAAO8C,MAAP,CAAcV,WAAW,CAAX,CAAd,CAAd;AACA,YAAIW,QAAQ/C,OAAO8C,MAAP,CAAcV,WAAW,CAAX,CAAd,CAAZ;AACA,YAAIY,SAAShD,OAAO8C,MAAP,CAAcxB,EAAd,CAAb;AACA,eAAQ0B,UAAUH,OAAV,IAAqBG,UAAUD,KAAvC;AACD,OALD,MAKK;AACH,eAAOzB,OAAOc,WAAW,CAAX,CAAd;AACD;AACF,KATiB,CAAlB;;AAWA,QAAGM,YAAYE,MAAZ,GAAqB,CAAxB,EAA0B;AACxB,aAAO7B,SAAS,OAAhB;AACD,KAFD,MAEK;AACH,aAAOA,SAAS,MAAhB;AACD;AACF,GAjBD;;AAmBA,SAAO,UAASK,GAAT,EAAc6B,GAAd,EAAmBC,IAAnB,EAAyB;AAC9B,QAAGrC,SAASI,SAAT,CAAmB2B,MAAnB,GAA4B,CAA/B,EAAiC;AAC/B,UAAIO,UAAUrD,EAAE6C,MAAF,CAAS9B,SAASI,SAAlB,EAA4B,UAASmC,OAAT,EAAiB;AACzD,YAAIC,QAAQ,IAAIC,MAAJ,CAAWF,OAAX,CAAZ;AACA,eAAOC,MAAME,IAAN,CAAWnC,IAAIoC,GAAf,CAAP;AACD,OAHa,CAAd;;AAKA,UAAGL,QAAQP,MAAR,GAAiB,CAApB,EAAsB;AACpB,YAAG/B,SAASD,GAAT,IAAgBC,SAAS4C,QAAT,KAAsB,MAAzC,EAAgD;AAC9C5C,mBAASG,IAAT,CAAc,uCAAuCmC,QAAQ,CAAR,CAArD;AACD;AACD,eAAOD,MAAP;AACD;AACF;;AAED,QAAI5B,KAAKT,SAASK,QAAT,CAAkBE,GAAlB,CAAT;AACA;AACA;AACA,QAAG,CAACb,GAAD,IAAQ,CAACA,IAAIqC,MAAhB,EAAwB;AAAE,aAAOM,MAAP;AAAgB;;AAE1C,QAAGrB,cAAcP,EAAd,EAAiBF,GAAjB,CAAH,EAA0B;AACxB;AACA,UAAGP,SAASD,GAAT,IAAgBC,SAAS4C,QAAT,KAAsB,MAAzC,EAAiD;AAC/C5C,iBAASG,IAAT,CAAc,mCAAmCM,EAAjD;AACD;;AAED,aAAO4B,MAAP;AACD;;AAED;AACA,QAAGrC,SAASD,GAAT,IAAgBC,SAAS4C,QAAT,KAAsB,OAAzC,EAAkD;AAChD5C,eAASG,IAAT,CAAc,kCAAkCM,EAAhD;AACD;;AAED,QAAIoC,MAAM,IAAIxD,aAAJ,CAAkB,kCAAkCoB,EAApD,CAAV;AACA,WAAO4B,KAAKQ,GAAL,CAAP;AACD,GApCD;AAqCD,CAjID","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash');\nvar iputil = require('ip');\nvar rangeCheck = require('range_check');\nvar IpDeniedError = require('./deniedError');\nvar ipaddr = require('ipaddr.js');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *\n *      app.use(ipfilter(ips));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `logF` Function to use for logging.\n *  - `log` console log actions. Defaults to true.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [ips] {Array} IP addresses\n * @param [opts] {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n  ips = ips || false;\n\n  var logger = function(message){ console.log(message);};\n  var settings = _.defaults( opts || {}, {\n    mode: 'deny',\n    log: true,\n    logF: logger,\n    excluding: [],\n    detectIp: getClientIp\n  });\n\n  function getClientIp(req) {\n    var ipAddress = req.ip;\n\n    if(iputil.isV6Format(ipAddress) && ~ipAddress.indexOf('::ffff')){\n      ipAddress = ipAddress.split('::ffff:')[1];\n    }\n\n    if(iputil.isV4Format(ipAddress) && ~ipAddress.indexOf(':')){\n      ipAddress = ipAddress.split(':')[0];\n    }\n\n    ipAddress = ipaddr.process(ipAddress).toString();\n\n    return ipAddress;\n  }\n\n  var matchClientIp = function(ip){\n    var mode = settings.mode.toLowerCase();\n\n    var result = _.invoke(ips,testIp,ip,mode);\n\n    if(mode === 'allow'){\n      return _.some(result);\n    }else{\n      return _.every(result);\n    }\n  };\n\n  var testIp = function(ip,mode){\n    var constraint = this;\n\n    // Check if it is an array or a string\n    if(typeof constraint === 'string'){\n      if(rangeCheck.validRange(constraint)){\n        return testCidrBlock(ip,constraint,mode);\n      }else{\n        return testExplicitIp(ip,constraint,mode);\n      }\n    }\n\n    if(typeof constraint === 'object'){\n      return testRange(ip,constraint,mode);\n    }\n  };\n\n  var testExplicitIp = function(ip,constraint,mode){\n    if(ip === constraint){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testCidrBlock = function(ip,constraint,mode){\n    if(rangeCheck.inRange(ip, constraint)){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testRange = function(ip,constraint,mode){\n    var filteredSet = _.filter(ips,function(constraint){\n      if(constraint.length > 1){\n        var startIp = iputil.toLong(constraint[0]);\n        var endIp = iputil.toLong(constraint[1]);\n        var longIp = iputil.toLong(ip);\n        return  longIp >= startIp && longIp <= endIp;\n      }else{\n        return ip === constraint[0];\n      }\n    });\n\n    if(filteredSet.length > 0){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  return function(req, res, next) {\n    if(settings.excluding.length > 0){\n      var results = _.filter(settings.excluding,function(exclude){\n        var regex = new RegExp(exclude);\n        return regex.test(req.url);\n      });\n\n      if(results.length > 0){\n        if(settings.log && settings.logLevel !== 'deny'){\n          settings.logF('Access granted for excluded path: ' + results[0]);\n        }\n        return next();\n      }\n    }\n\n    var ip = settings.detectIp(req);\n    // If no IPs were specified, skip\n    // this middleware\n    if(!ips || !ips.length) { return next(); }\n\n    if(matchClientIp(ip,req)) {\n      // Grant access\n      if(settings.log && settings.logLevel !== 'deny') {\n        settings.logF('Access granted to IP address: ' + ip);\n      }\n\n      return next();\n    }\n\n    // Deny access\n    if(settings.log && settings.logLevel !== 'allow') {\n      settings.logF('Access denied to IP address: ' + ip);\n    }\n\n    var err = new IpDeniedError('Access denied to IP address: ' + ip);\n    return next(err);\n  };\n};\n"]}