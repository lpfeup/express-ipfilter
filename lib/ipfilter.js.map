{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","ipaddr","module","exports","ipfilter","ips","opts","logger","message","console","log","settings","defaults","mode","logF","allowPrivateIPs","excluding","getClientIp","req","ipAddress","ip","indexOf","split","process","toString","matchClientIp","toLowerCase","result","invoke","testIp","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","length","startIp","toLong","endIp","longIp","res","next","results","exclude","regex","RegExp","test","url","logLevel","err"],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash');\nvar iputil = require('ip');\nvar rangeCheck = require('range_check');\nvar IpDeniedError = require('./deniedError');\nvar ipaddr = require('ipaddr.js');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *\n *      app.use(ipfilter(ips));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `log` console log actions. Defaults to true.\n    - `allowPrivateIPs` whether to allow private IPs.\n    - `allowForward` whether to allow forwarded IPs.\n    - `allowCloudflare` whether to allow CloudFlare forwarded headers.\n    - 'allowCodio' whether to allow Codio forwarded headers.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [ips] {Array} IP addresses\n * @param [opts] {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n  ips = ips || false;\n\n  var logger = function(message){ console.log(message);};\n  var settings = _.defaults( opts || {}, {\n    mode: 'deny',\n    log: true,\n    logF: logger,\n    allowPrivateIPs: false,\n    excluding: []\n  });\n\n  var getClientIp = function(req) {\n    var ipAddress = req.ip;\n\n    if(ipAddress.indexOf(':') !== -1 && ipAddress.indexOf('::') === -1){\n      ipAddress = ipAddress.split(':')[0];\n    }\n\n    ipAddress = ipaddr.process(ipAddress).toString();\n\n    return ipAddress;\n  };\n\n  var matchClientIp = function(ip){\n    var mode = settings.mode.toLowerCase();\n\n    var result = _.invoke(ips,testIp,ip,mode);\n\n    if(mode === 'allow'){\n      return _.some(result);\n    }else{\n      return _.every(result);\n    }\n  };\n\n  var testIp = function(ip,mode){\n    var constraint = this;\n\n    // Check if it is an array or a string\n    if(typeof constraint === 'string'){\n      if(rangeCheck.validRange(constraint)){\n        return testCidrBlock(ip,constraint,mode);\n      }else{\n        return testExplicitIp(ip,constraint,mode);\n      }\n    }\n\n    if(typeof constraint === 'object'){\n      return testRange(ip,constraint,mode);\n    }\n  };\n\n  var testExplicitIp = function(ip,constraint,mode){\n    if(ip === constraint){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testCidrBlock = function(ip,constraint,mode){\n    if(rangeCheck.inRange(ip, constraint)){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testRange = function(ip,constraint,mode){\n    var filteredSet = _.filter(ips,function(constraint){\n      if(constraint.length > 1){\n        var startIp = iputil.toLong(constraint[0]);\n        var endIp = iputil.toLong(constraint[1]);\n        var longIp = iputil.toLong(ip);\n        return  longIp >= startIp && longIp <= endIp;\n      }else{\n        return ip === constraint[0];\n      }\n    });\n\n    if(filteredSet.length > 0){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  return function(req, res, next) {\n    if(settings.excluding.length > 0){\n      var results = _.filter(settings.excluding,function(exclude){\n        var regex = new RegExp(exclude);\n        return regex.test(req.url);\n      });\n\n      if(results.length > 0){\n        if(settings.log){\n          logger('Access granted for excluded path: ' + results[0]);\n        }\n        return next();\n      }\n    }\n\n    var ip = getClientIp(req);\n    // If no IPs were specified, skip\n    // this middleware\n    if(!ips || !ips.length) { return next(); }\n\n    if(matchClientIp(ip,req)) {\n      // Grant access\n      if(settings.log && settings.logLevel !== 'deny') {\n        settings.logF('Access granted to IP address: ' + ip);\n      }\n\n      return next();\n    }\n\n    // Deny access\n    if(settings.log && settings.logLevel !== 'allow') {\n      settings.logF('Access denied to IP address: ' + ip);\n    }\n\n    var err = new IpDeniedError('Access denied to IP address: ' + ip);\n    return next(err);\n  };\n};\n"]}